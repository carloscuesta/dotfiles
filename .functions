# .functions

# mcd : Makes a new dir and jumps into it.

function mcd() {
	mkdir -p "$1" && cd "$1";
}

# server : Start an HTTP server from a directory, optionally specifying the port

function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/"
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# zipf : To create a ZIP archive of a folder

function zipf() {
	zip -r "$1".zip "$1" ;
}

# camerausedby : who is using the laptop's iSight camera?

camerausedby() {
    echo "Checking to see who is using the iSight cameraâ€¦ ðŸ“·"
    usedby=$(lsof | grep -w "AppleCamera\|USBVDC\|iSight" | awk '{printf $2"\n"}' | xargs ps)
    echo -e "Recent camera uses:\n$usedby"
}


# hackchat : creates a hack.chat room and enters it (http://hack.chat)

function hackchat() {
  local room_name="$1"
    if [ -z "${room_name}" ]; then
      echo "Error, you must specify a chat room name. Usage: hackchat test"
    else
      open "http://hack.chat/?$room_name"
    fi
}

# extract : extract any file with this command.

extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1     ;;
      *.tar.gz)    tar xzf $1     ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar e $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xf $1      ;;
      *.tbz2)      tar xjf $1     ;;
      *.tgz)       tar xzf $1     ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)     echo "'$1' cannot be extracted via extract()" ;;
       esac
   else
       echo "'$1' is not a valid file"
   fi
}

# json : pretty print of a json

function json() {
  if [ -p /dev/stdin ]; then
    # piping, e.g. `echo '{"foo":42}' | json`
    python -mjson.tool | pygmentize -l javascript
  else
    # e.g. `json '{"foo":42}'`
    python -mjson.tool <<< "$*" | pygmentize -l javascript
  fi
}

# hklogs : Display logs from a heroku app continually

function hklogs() {
    local app_name="$1"
    if [ -z "${app_name}" ]; then
      echo "Error, you need to specify the app name. Usage: hklogs appname"
    else
        heroku logs --app $app_name -t
    fi
}
